<h1>
    <%=title%>
</h1>

<form id="petForm">
    <input required type="hidden" name="id" id="id">
    <label for="name">Nome</label>
    <input required name="name" id="name" type="text"><br>
    <label for="race">Price</label>
    <input required name="price" id="price" type="text"><br>
    <label for="colour">Date</label>
    <input required name="date" id="date" type="text"><br>
    <button type="submit">Enviar</button>
    <button type="reset">Cancelar</button>
</form>
<span id="error"></span>

<%if(error){%>
    <span>
        <%=error%>
    </span>
    <%}%>

        <table>
            <thead>
                <tr>
                    <%for(let col of cols){%>
                        <th>
                            <%=col%>
                        </th>
                        <%}%>
                </tr>
            </thead>
            <tbody>
                <%for(let pet of pets){%>
                    <tr>
                        <%for(let prop in pet){%>
                            <td>
                                <%=pet[prop]%>
                            </td>
                            <%}%>
                                <td>
                                    <button onclick="editgames('<%=pet.id%>')">Editar</button>
                                    <button onclick="deletegames('<%=pet.id%>')">Deletar</button>
                                </td>
                    </tr>
                    <%}%>
            </tbody>
        </table>

        <script>
            const form = document.getElementById('petForm')
            form.addEventListener("submit", (e) => {
                e.preventDefault()
                const pet = mountDataForm()
                let id = game.id
                let METHOD = id ? 'PUT' : 'POST';
                let URL = id ? `/pets/${id}` : '/pets';
                createOrUpdate(game, URL, METHOD)
            })

            // CRIAR OU ATULIZAR jogos
            function createOrUpdate(game, URL, METHOD) {
                console.log(game)
                fetch(URL, {
                    method: METHOD,
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(game)
                })
                    .then(async (res) => { return await checkError(res) })
                    .then((game) => {
                        form.reset()
                        window.location.reload()
                    })
                    .catch((error) => { document.getElementById('error').innerText = error })
            }

            // BUSCAR jogos A SER EDITADO PELO ID E CARREGAR NOS INPUTS DO FORM
            function editgames(id) {
            console.log(id)
                fetch("/pets/" + id, {
                    method: "GET"
                })
                    .then(async (res) => { return await checkError(res) })
                    .then((game) => {
                        console.log('retornou o PET', game)
                        for (let prop in game) {
                            const input = document.querySelector(`input[name="${prop}"]`);
                            input.value = game[prop]
                        }
                    })
                    .catch((error) => { document.getElementById('error').innerText = error })
            }

            // DELETAR UM jogo PELO ID
            function deletegames(id) {
                fetch("/pets/" + id, {
                    method: "DELETE"
                })
                    .then(async (res) => { return await checkError(res) })
                    .then((game) => {
                        window.location.reload()
                    })
                    .catch((error) => { document.getElementById('error').innerText = error })
            }

            // CHECAR ERROS NA RESPOSTA DA REQUISIÇÃO
            async function checkError(res) {
                if (!res.ok) {
                    const err = await res.json()
                    throw err
                }
                return res.json()
            }

            // MONTAR DADOS DO FORMULÁRIO USANDO FORMDATA
            function mountDataForm() {
                const formData = new FormData(form)
                const game = {}
                formData.forEach((v, k) => {
                    game[k] = v
                })
                return game
            }

        </script>